USE [optimove_visitors_A]
GO
/****** Object:  StoredProcedure [optitrackSDK].[USP_CollectSplittedVisitIdsFromPreviousETL]    Script Date: 27/7/2017 3:27:13 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yotam Schreiber
-- Create date: 11.06.2017
-- Description: SP which finds the ids of sessions that were splitted between the previous ETL and the current ETL
-- =============================================

CREATE PROCEDURE [optitrackSDK].[USP_CollectSplittedVisitIdsFromPreviousETL] 

AS
BEGIN
	
	SET NOCOUNT ON

	INSERT [optitrackSDK].[SplittedVisitIds_TEMP]
	SELECT DISTINCT [VisitId]
	FROM [optitrackSDK].[PiwikVisitAction]
	WHERE [VisitId] <= (SELECT [LastAggregatedVisitId] FROM [optitrackSDK].[Config])
	GROUP BY [VisitId]

END



GO
/****** Object:  StoredProcedure [optitrackSDK].[USP_FindNewCustomersSinceLastETL]    Script Date: 27/7/2017 3:27:13 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [optitrackSDK].[USP_FindNewCustomersSinceLastETL] 

AS
BEGIN
	
	INSERT INTO [optitrackSDK].[CustomersBeforeRegister_TMP]
	SELECT * FROM (
		SELECT DISTINCT custom_dimension_4 AS [CustomerId], custom_dimension_5 AS [OriginalVisitorID] 
		FROM [optitrackSDK].[PiwikVisitAction]
		WHERE custom_dimension_2 = 'set_user_id_event'
	) SUB
	
END


GO
/****** Object:  StoredProcedure [optitrackSDK].[USP_GetMinMaxSplittedVisitIds]    Script Date: 27/7/2017 3:27:13 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:           Yotam Schreiber
-- Create date:  12/06/2017
-- Description:  Stored procedure that returns thr max or min session id of the splitted sessions    
-- =============================================
CREATE PROCEDURE  [optitrackSDK].[USP_GetMinMaxSplittedVisitIds]
       -- Add the parameters for the stored procedure here
              @isMax bit

with recompile
AS 
BEGIN
    set xact_abort on;
       SET NOCOUNT OFF;
 
	IF(@isMax <= 0)
		BEGIN
			IF EXISTS (SELECT TOP 1 * FROM [optitrackSDK].[SplittedVisitIds_TEMP])
				SELECT MIN([VisitId]) FROM  [optitrackSDK].[SplittedVisitIds_TEMP]
			ELSE 
				SELECT 0		
		END
	ELSE
		BEGIN
			IF EXISTS (SELECT TOP 1 * FROM [optitrackSDK].[SplittedVisitIds_TEMP])
				SELECT MAX([VisitId]) FROM  [optitrackSDK].[SplittedVisitIds_TEMP]
			ELSE 
				SELECT 0		
	END
END




GO
/****** Object:  StoredProcedure [optitrackSDK].[USP_GetNext100000SplittedVisitIDs]    Script Date: 27/7/2017 3:27:13 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [optitrackSDK].[USP_GetNext100000SplittedVisitIDs]

	@LastCopiedId BIGINT

AS
BEGIN

	SET NOCOUNT ON;
	
	DECLARE @SQL NVARCHAR(MAX) = ''

	SET @SQL = '
		SELECT TOP 100000 * FROM [optitrackSDK].[SplittedVisitIds_TEMP]
		                                        WHERE VisitId >= ' + CAST(@LastCopiedId as nvarchar(21)) +'
		                                        ORDER BY VisitId ASC
	'
	
	EXEC(@SQL)

END



GO
/****** Object:  StoredProcedure [optitrackSDK].[USP_GetPiwikIdentityData]    Script Date: 27/7/2017 3:27:13 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [optitrackSDK].[USP_GetPiwikIdentityData]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	SELECT * FROM [optitrackSDK].[PiwikIdentity]
			
END


GO
/****** Object:  StoredProcedure [optitrackSDK].[USP_GetPublicCustomerIds]    Script Date: 27/7/2017 3:27:13 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [optitrackSDK].[USP_GetPublicCustomerIds] 
	@isHashingTableNotExists int
AS
BEGIN
	
	SET NOCOUNT ON

	INSERT INTO [optitrackSDK].[OptimoveAlias]
	SELECT DISTINCT P.[VisitorId],P.[UserId],@isHashingTableNotExists
	FROM   [optitrackSDK].[PiwikVisit] P LEFT JOIN [optitrackSDK].[OptimoveAlias]  OA ON P.[UserId] = OA.[CustomerId]
	LEFT JOIN [optitrackSDK].[OptimoveAlias] OAV ON P.[VisitorId] = OAV.[VisitorId]
	WHERE  P.[UserId] IS NOT NULL AND P.[Id] >= (SELECT MIN(VisitId) FROM [optitrackSDK].[PiwikVisitAction]) AND ( OA.[CustomerId] IS NULL OR OAV.[VisitorId] IS NULL )

END



GO
/****** Object:  StoredProcedure [optitrackSDK].[USP_RegisterNewCustomersFromOptitrack]    Script Date: 27/7/2017 3:27:13 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [optitrackSDK].[USP_RegisterNewCustomersFromOptitrack] 

AS
BEGIN
	
	SET NOCOUNT ON

	-- check if we know the customers as visitor and if so save their optimove id
	;WITH CTE AS (	
	SELECT [CustomerId] AS CLIENT_CUSTOMER_ID, [OriginalVisitorID] AS Visitor_ID
	FROM [optitrackSDK].[CustomersBeforeRegister_TMP]
	)


	INSERT OptimoveCustomerIds (CLIENT_CUSTOMER_ID,Customer_ID)
	SELECT CLIENT_CUSTOMER_ID, Customer_ID FROM (
	DELETE [vis].[VisitorOptimoveIds] 
	OUTPUT DELETED.Customer_ID, CTE.CLIENT_CUSTOMER_ID
	FROM [vis].[VisitorOptimoveIds] INNER JOIN CTE ON CTE.Visitor_ID = VisitorOptimoveIds.VISITOR_ID
	) SUB

	-- register the new customers that we don't know as visitors
	EXEC [exp].[USP_CVM_RegisterNewIds] '[optitrack].[CustomersBeforeRegister_TMP]','CustomerId';

	
END
GO
/****** Object:  StoredProcedure [optitrackSDK].[USP_RegisterNewUniqueVisitorsIds]    Script Date: 27/7/2017 3:27:13 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [optitrackSDK].[USP_RegisterNewUniqueVisitorsIds]

		@minSessionTime int = 10

		with recompile
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	

	INSERT vis.VisitorOptimoveIds(CUSTOMER_ID,VISITOR_ID)
	SELECT NEXT VALUE FOR SEQ_OptimoveCustomerIDs Customer_ID, VisitorId 
	   FROM (
				SELECT DISTINCT P.[VisitorId]
				FROM   [optitrackSDK].[PiwikVisit] P
				WHERE NOT EXISTS (SELECT 1 
								   FROM   [optitrackSDK].[OptimoveAlias] OA 
								   WHERE  OA.[VisitorId] = P.[VisitorId])
				AND
				P.[UserId] IS NULL
				AND
				P.ID > (SELECT [LastAggregatedVisitId] FROM [optitrackSDK].[Config])
				AND
				DATEDIFF(SECOND, P.VisitFirstActionTime, P.VisitLastActionTime) >= @minSessionTime
			) Q
	WHERE (
		NOT EXISTS(SELECT 1 FROM vis.VisitorOptimoveIds v WHERE v.VISITOR_ID = Q.VisitorId) 
		AND 
		NOT EXISTS (SELECT 1 FROM [optitrackSDK].[VisitorsMapping] M WHERE M.[VisitorId] = Q.VisitorId)
	)

END


GO
/****** Object:  StoredProcedure [optitrackSDK].[USP_ReplaceHashedCustomersIds]    Script Date: 27/7/2017 3:27:13 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [optitrackSDK].[USP_ReplaceHashedCustomersIds]
	-- Add the parameters for the stored procedure here
	@profileServerName nvarchar(50)= '',
    @profileDBName nvarchar(50) = '',
	@lookupTableName nvarchar(100) = ''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE 
	@sql nvarchar(max) = '',
	@FullTargetPath nvarchar(max) = '',
	@lookupTableNameTargetPath nvarchar(max) = ''


	SET @FullTargetPath = '[' + @profileDBName + ']' + '.';
	IF(LEN(@profileServerName) >= 1)
	BEGIN
              SET @FullTargetPath = '[' + @profileServerName + ']' + '.' + '[' + @profileDBName + ']' + '.' ;
	END


	IF(LEN(@lookupTableName) >= 1)
	BEGIN
	SET @lookupTableNameTargetPath = @FullTargetPath + '[dbo].' +  @lookupTableName; 
	END

	IF OBJECT_ID(N'dbo.OptimoveAliasHashed') IS NOT NULL DROP TABLE OptimoveAliasHashed;

	SELECT * 
	INTO OptimoveAliasHashed
	FROM [optitrackSDK].[OptimoveAlias]
	WHERE [IsUnique] = 0 OPTION (MAXDOP 1);

	DELETE FROM [optitrackSDK].[OptimoveAlias] WHERE IsUnique = 0 OPTION (MAXDOP 1);


	SET @sql = 'INSERT INTO [optitrackSDK].[OptimoveAlias] ([VisitorId],[CustomerId],[IsUnique])
				SELECT DISTINCT [VisitorId],Lkp.[CustomerId],1
				FROM OptimoveAliasHashed OAHased INNER JOIN ' + @lookupTableNameTargetPath +' Lkp ON OAHased.[CustomerId] = LOWER(Lkp.[PublicCustomerId]) OPTION (MAXDOP 1)'
	EXEC(@sql)

	IF OBJECT_ID(N'dbo.OptimoveAliasHashed') IS NOT NULL DROP TABLE OptimoveAliasHashed;

END
GO
/****** Object:  StoredProcedure [optitrackSDK].[USP_UpdatePiwikIdentityData]    Script Date: 27/7/2017 3:27:13 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [optitrackSDK].[USP_UpdatePiwikIdentityData]

	@TableName nvarchar(255),
	@Id BIGINT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @SQL NVARCHAR(MAX) =''

	SET @SQL = '
	
	UPDATE [optitrackSDK].[PiwikIdentity]
	SET [Id] = ' + CAST(@Id as nvarchar(21)) + '
	WHERE [TableName] = ''' + @TableName + '''
	'
	EXEC(@SQL)

END


GO
/****** Object:  StoredProcedure [optitrackSDK].[USP_UpdateSplittedVisits]    Script Date: 27/7/2017 3:27:13 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [optitrackSDK].[USP_UpdateSplittedVisits] 

AS
BEGIN
	
	SET NOCOUNT ON



UPDATE [optitrackSDK].[PiwikVisit]
SET [UserId] = T.[UserId],
	[VisitorId] = T.[VisitorId],
	[VisitLastActionTime] = T.[VisitLastActionTime]

FROM [optitrackSDK].[PiwikVisit] P JOIN [optitrackSDK].[SplittedVisitData] T
ON P.[Id] = T.[Id]
WHERE P.[Id] >= (SELECT MIN([Id]) FROM [optitrackSDK].[SplittedVisitData])


DELETE FROM [optitrackSDK].[SplittedVisitData]
DELETE FROM [optitrackSDK].[SplittedVisitIds_TEMP]


END


GO
